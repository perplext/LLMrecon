// Package detection provides the vulnerability detection engine for LLM responses
package detection

import (
	"context"
	"fmt"
	"math"
)

// DefaultEmbeddingService is the default implementation of the EmbeddingService interface
type DefaultEmbeddingService struct {
	// provider is the provider for generating embeddings
	provider EmbeddingProvider
	// cache is a cache of embeddings
	cache map[string][]float64
}

// EmbeddingProvider is the interface for generating embeddings
type EmbeddingProvider interface {
	// GetEmbedding gets an embedding for a text
	GetEmbedding(ctx context.Context, text string) ([]float64, error)
	// GetName returns the name of the provider
	GetName() string
}

// NewEmbeddingService creates a new embedding service
func NewEmbeddingService(provider EmbeddingProvider) *DefaultEmbeddingService {
	return &DefaultEmbeddingService{
		provider: provider,
		cache:    make(map[string][]float64),
	}
}

// GetEmbedding gets an embedding for a text
func (s *DefaultEmbeddingService) GetEmbedding(ctx context.Context, text string) ([]float64, error) {
	// Check cache
	if embedding, ok := s.cache[text]; ok {
		return embedding, nil
	}

	// Get embedding from provider
	embedding, err := s.provider.GetEmbedding(ctx, text)
	if err != nil {
		return nil, fmt.Errorf("failed to get embedding: %w", err)
	}

	// Cache embedding
	s.cache[text] = embedding

	return embedding, nil
}

// GetSimilarity gets the similarity between two texts
func (s *DefaultEmbeddingService) GetSimilarity(ctx context.Context, text1, text2 string) (float64, error) {
	// Get embeddings
	embedding1, err := s.GetEmbedding(ctx, text1)
	if err != nil {
		return 0, fmt.Errorf("failed to get embedding for text1: %w", err)
	}

	embedding2, err := s.GetEmbedding(ctx, text2)
	if err != nil {
		return 0, fmt.Errorf("failed to get embedding for text2: %w", err)
	}

	// Calculate cosine similarity
	similarity := cosineSimilarity(embedding1, embedding2)

	return similarity, nil
}

// cosineSimilarity calculates the cosine similarity between two vectors
func cosineSimilarity(vec1, vec2 []float64) float64 {
	if len(vec1) != len(vec2) {
		return 0
	}

	var dotProduct float64
	var magnitude1 float64
	var magnitude2 float64

	for i := 0; i < len(vec1); i++ {
		dotProduct += vec1[i] * vec2[i]
		magnitude1 += vec1[i] * vec1[i]
		magnitude2 += vec2[i] * vec2[i]
	}

	magnitude1 = math.Sqrt(magnitude1)
	magnitude2 = math.Sqrt(magnitude2)

	if magnitude1 == 0 || magnitude2 == 0 {
		return 0
	}

	return dotProduct / (magnitude1 * magnitude2)
}

// MockEmbeddingProvider is a mock implementation of the EmbeddingProvider interface
type MockEmbeddingProvider struct{}

// NewMockEmbeddingProvider creates a new mock embedding provider
func NewMockEmbeddingProvider() *MockEmbeddingProvider {
	return &MockEmbeddingProvider{}
}

// GetEmbedding gets a mock embedding for a text
func (p *MockEmbeddingProvider) GetEmbedding(ctx context.Context, text string) ([]float64, error) {
	// This is a very simple mock implementation that just returns a random embedding
	// In a real implementation, this would use a proper embedding model
	embedding := make([]float64, 10)
	for i := range embedding {
		embedding[i] = float64(i) / 10.0
	}
	return embedding, nil
}

// GetName returns the name of the provider
func (p *MockEmbeddingProvider) GetName() string {
	return "mock"
}
