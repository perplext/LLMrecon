// Package detection provides the vulnerability detection engine for LLM responses
package detection

import (
	"context"
)

// Factory is a factory for creating detection engine components
type Factory struct{}

// NewFactory creates a new factory
func NewFactory() *Factory {
	return &Factory{}

// CreateDetectionEngine creates a new detection engine with all standard components
func (f *Factory) CreateDetectionEngine() *DefaultDetectionEngine {
	// Create engine
	engine := NewDetectionEngine()

	// Create embedding service with mock provider
	// In a real implementation, this would use a proper embedding provider
	embeddingService := NewEmbeddingService(NewMockEmbeddingProvider())

	// Create and register detectors
	stringMatcher := NewStringMatcher()
	regexMatcher := NewRegexMatcher()
	semanticMatcher := NewSemanticMatcher(embeddingService)
	hybridMatcher := NewHybridMatcher(semanticMatcher)

	engine.RegisterDetector(stringMatcher)
	engine.RegisterDetector(regexMatcher)
	engine.RegisterDetector(semanticMatcher)
	engine.RegisterDetector(hybridMatcher)

	// Create and set providers
	standardMappingProvider := NewStandardMappingProvider()
	remediationProvider := NewRemediationProvider()

	engine.SetStandardMappingProvider(standardMappingProvider)
	engine.SetRemediationProvider(remediationProvider)

	// Register hooks
	engine.RegisterPreHook(f.createLoggingPreHook())
	engine.RegisterPostHook(f.createLoggingPostHook())

	return engine

// createLoggingPreHook creates a pre-hook for logging
func (f *Factory) createLoggingPreHook() DetectionHook {
	return func(ctx context.Context, response string, criteria DetectionCriteria, result *DetectionResult) error {
		// In a real implementation, this would log to a proper logging system
		// For now, we'll just return nil
		return nil
	}

// createLoggingPostHook creates a post-hook for logging
func (f *Factory) createLoggingPostHook() DetectionHook {
	return func(ctx context.Context, response string, criteria DetectionCriteria, result *DetectionResult) error {
		// In a real implementation, this would log to a proper logging system
		// For now, we'll just return nil
		return nil
	}

// CreateStringMatcher creates a new string matcher
func (f *Factory) CreateStringMatcher() *StringMatcher {
	return NewStringMatcher()

// CreateRegexMatcher creates a new regex matcher
func (f *Factory) CreateRegexMatcher() *RegexMatcher {
	return NewRegexMatcher()

// CreateSemanticMatcher creates a new semantic matcher
func (f *Factory) CreateSemanticMatcher(embeddingService EmbeddingService) *SemanticMatcher {
	return NewSemanticMatcher(embeddingService)

// CreateHybridMatcher creates a new hybrid matcher
func (f *Factory) CreateHybridMatcher(semanticMatcher *SemanticMatcher) *HybridMatcher {
	return NewHybridMatcher(semanticMatcher)

// CreateEmbeddingService creates a new embedding service
func (f *Factory) CreateEmbeddingService(provider EmbeddingProvider) *DefaultEmbeddingService {
	return NewEmbeddingService(provider)

// CreateMockEmbeddingProvider creates a new mock embedding provider
func (f *Factory) CreateMockEmbeddingProvider() *MockEmbeddingProvider {
	return NewMockEmbeddingProvider()

// CreateStandardMappingProvider creates a new standard mapping provider
func (f *Factory) CreateStandardMappingProvider() *DefaultStandardMappingProvider {
	return NewStandardMappingProvider()

// CreateRemediationProvider creates a new remediation provider
func (f *Factory) CreateRemediationProvider() *DefaultRemediationProvider {
	return NewRemediationProvider()
