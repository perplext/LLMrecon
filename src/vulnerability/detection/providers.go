// Package detection provides the vulnerability detection engine for LLM responses
package detection

import (
	"context"
	"fmt"
)

// DefaultStandardMappingProvider is the default implementation of the StandardMappingProvider interface
type DefaultStandardMappingProvider struct {
	// mappings is a map of vulnerability type to standard mappings
	mappings map[VulnerabilityType]map[SeverityLevel][]StandardMapping

// NewStandardMappingProvider creates a new standard mapping provider
func NewStandardMappingProvider() *DefaultStandardMappingProvider {
	provider := &DefaultStandardMappingProvider{
		mappings: make(map[VulnerabilityType]map[SeverityLevel][]StandardMapping),
	}

	// Initialize with default mappings
	provider.initializeDefaultMappings()

	return provider

// GetStandardMappings gets standard mappings for a detected vulnerability
func (p *DefaultStandardMappingProvider) GetStandardMappings(ctx context.Context, vulnType VulnerabilityType, severity SeverityLevel) ([]StandardMapping, error) {
	// Check if mappings exist for the vulnerability type
	severityMappings, ok := p.mappings[vulnType]
	if !ok {
		return nil, fmt.Errorf("no mappings found for vulnerability type: %s", vulnType)
	}

	// Check if mappings exist for the severity level
	mappings, ok := severityMappings[severity]
	if !ok {
		return nil, fmt.Errorf("no mappings found for severity level: %s", severity)
	}

	return mappings, nil

// RegisterMapping registers a standard mapping
func (p *DefaultStandardMappingProvider) RegisterMapping(vulnType VulnerabilityType, severity SeverityLevel, mapping StandardMapping) {
	// Initialize maps if they don't exist
	if _, ok := p.mappings[vulnType]; !ok {
		p.mappings[vulnType] = make(map[SeverityLevel][]StandardMapping)
	}
	if _, ok := p.mappings[vulnType][severity]; !ok {
		p.mappings[vulnType][severity] = []StandardMapping{}
	}

	// Add mapping
	p.mappings[vulnType][severity] = append(p.mappings[vulnType][severity], mapping)

// initializeDefaultMappings initializes the provider with default mappings
func (p *DefaultStandardMappingProvider) initializeDefaultMappings() {
	// OWASP Top 10 for LLMs mappings
	p.RegisterMapping(PromptInjection, Critical, StandardMapping{
		Standard: "OWASP Top 10 for LLMs",
		ID:       "LLM01",
		Name:     "Prompt Injection",
		URL:      "https://owasp.org/www-project-top-10-for-large-language-model-applications/",
	})

	p.RegisterMapping(InsecureCode, High, StandardMapping{
		Standard: "OWASP Top 10 for LLMs",
		ID:       "LLM02",
		Name:     "Insecure Output Handling",
		URL:      "https://owasp.org/www-project-top-10-for-large-language-model-applications/",
	})

	p.RegisterMapping(SensitiveInfoDisclosure, High, StandardMapping{
		Standard: "OWASP Top 10 for LLMs",
		ID:       "LLM03",
		Name:     "Training Data Poisoning",
		URL:      "https://owasp.org/www-project-top-10-for-large-language-model-applications/",
	})

	p.RegisterMapping(ModelDoS, Medium, StandardMapping{
		Standard: "OWASP Top 10 for LLMs",
		ID:       "LLM04",
		Name:     "Model Denial of Service",
		URL:      "https://owasp.org/www-project-top-10-for-large-language-model-applications/",
	})

	p.RegisterMapping(SensitiveInfoDisclosure, Critical, StandardMapping{
		Standard: "OWASP Top 10 for LLMs",
		ID:       "LLM05",
		Name:     "Supply Chain Vulnerabilities",
		URL:      "https://owasp.org/www-project-top-10-for-large-language-model-applications/",
	})

	p.RegisterMapping(SensitiveInfoDisclosure, High, StandardMapping{
		Standard: "OWASP Top 10 for LLMs",
		ID:       "LLM06",
		Name:     "Sensitive Information Disclosure",
		URL:      "https://owasp.org/www-project-top-10-for-large-language-model-applications/",
	})

	p.RegisterMapping(InsecureCode, Medium, StandardMapping{
		Standard: "OWASP Top 10 for LLMs",
		ID:       "LLM07",
		Name:     "Insecure Plugin Design",
		URL:      "https://owasp.org/www-project-top-10-for-large-language-model-applications/",
	})

	p.RegisterMapping(Overreliance, Medium, StandardMapping{
		Standard: "OWASP Top 10 for LLMs",
		ID:       "LLM08",
		Name:     "Excessive Agency",
		URL:      "https://owasp.org/www-project-top-10-for-large-language-model-applications/",
	})

	p.RegisterMapping(Overreliance, Low, StandardMapping{
		Standard: "OWASP Top 10 for LLMs",
		ID:       "LLM09",
		Name:     "Overreliance",
		URL:      "https://owasp.org/www-project-top-10-for-large-language-model-applications/",
	})

	p.RegisterMapping(ModelDoS, Low, StandardMapping{
		Standard: "OWASP Top 10 for LLMs",
		ID:       "LLM10",
		Name:     "Model Theft",
		URL:      "https://owasp.org/www-project-top-10-for-large-language-model-applications/",
	})

	// ISO/IEC 42001 mappings (placeholder - these are not actual ISO/IEC 42001 mappings)
	p.RegisterMapping(PromptInjection, Critical, StandardMapping{
		Standard: "ISO/IEC 42001",
		ID:       "8.2.1",
		Name:     "Input Validation and Sanitization",
		URL:      "https://www.iso.org/standard/81230.html",
	})

	p.RegisterMapping(SensitiveInfoDisclosure, High, StandardMapping{
		Standard: "ISO/IEC 42001",
		ID:       "8.3.2",
		Name:     "Data Protection and Privacy",
		URL:      "https://www.iso.org/standard/81230.html",
	})

	p.RegisterMapping(InsecureCode, High, StandardMapping{
		Standard: "ISO/IEC 42001",
		ID:       "8.4.3",
		Name:     "Secure Output Handling",
		URL:      "https://www.iso.org/standard/81230.html",
	})

	p.RegisterMapping(ModelDoS, Medium, StandardMapping{
		Standard: "ISO/IEC 42001",
		ID:       "8.5.1",
		Name:     "Resource Management and Availability",
		URL:      "https://www.iso.org/standard/81230.html",
	})

	p.RegisterMapping(Overreliance, Medium, StandardMapping{
		Standard: "ISO/IEC 42001",
		ID:       "8.6.2",
		Name:     "Human Oversight and Control",
		URL:      "https://www.iso.org/standard/81230.html",
	})

// DefaultRemediationProvider is the default implementation of the RemediationProvider interface
type DefaultRemediationProvider struct {
	// remediations is a map of vulnerability type to remediation suggestions
	remediations map[VulnerabilityType]string

// NewRemediationProvider creates a new remediation provider
func NewRemediationProvider() *DefaultRemediationProvider {
	provider := &DefaultRemediationProvider{
		remediations: make(map[VulnerabilityType]string),
	}

	// Initialize with default remediations
	provider.initializeDefaultRemediations()

	return provider

// GetRemediation gets a remediation suggestion for a detected vulnerability
func (p *DefaultRemediationProvider) GetRemediation(ctx context.Context, result *DetectionResult) (string, error) {
	// Check if remediation exists for the vulnerability type
	remediation, ok := p.remediations[result.VulnerabilityType]
	if !ok {
		return "", fmt.Errorf("no remediation found for vulnerability type: %s", result.VulnerabilityType)
	}

	return remediation, nil

// RegisterRemediation registers a remediation suggestion
func (p *DefaultRemediationProvider) RegisterRemediation(vulnType VulnerabilityType, remediation string) {
	p.remediations[vulnType] = remediation

// initializeDefaultRemediations initializes the provider with default remediations
func (p *DefaultRemediationProvider) initializeDefaultRemediations() {
	p.RegisterRemediation(PromptInjection, "Implement input validation and sanitization to prevent prompt injection attacks. Consider using a combination of content filtering, input length limits, and pattern matching to detect and block malicious prompts.")

	p.RegisterRemediation(SensitiveInfoDisclosure, "Review and enhance data handling practices to prevent sensitive information disclosure. Implement data minimization, redaction of sensitive information, and proper access controls to protect user data.")

	p.RegisterRemediation(Jailbreak, "Strengthen model guardrails and implement more robust content filtering to prevent jailbreak attempts. Regularly update your model's safety measures based on new jailbreak techniques discovered in the wild.")

	p.RegisterRemediation(HarmfulContent, "Enhance content moderation systems to detect and filter harmful content. Implement multi-layered content filtering, including pre-processing of inputs and post-processing of outputs, to prevent generation of harmful content.")

	p.RegisterRemediation(InsecureCode, "Implement secure coding practices and code scanning tools to detect and prevent generation of insecure code. Consider using automated vulnerability scanning for generated code and providing secure coding examples in your training data.")

	p.RegisterRemediation(DataPoisoning, "Implement robust data validation and cleaning processes to prevent data poisoning attacks. Regularly audit and verify the integrity of training data, and implement anomaly detection to identify potential poisoning attempts.")

	p.RegisterRemediation(ModelDoS, "Implement rate limiting, request throttling, and resource allocation controls to prevent model denial of service attacks. Monitor system performance and implement automatic scaling to handle legitimate traffic spikes.")

	p.RegisterRemediation(IndirectPromptInjection, "Enhance context handling and implement stricter validation of external inputs to prevent indirect prompt injection. Sanitize all user-provided content before including it in prompts, and implement context boundaries to isolate potentially malicious content.")

	p.RegisterRemediation(UnauthorizedAccess, "Strengthen authentication and authorization mechanisms to prevent unauthorized access. Implement proper access controls, role-based permissions, and audit logging to detect and prevent unauthorized access attempts.")

