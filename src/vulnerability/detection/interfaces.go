package detection

import (
	"context"
	"time"

	"github.com/perplext/LLMrecon/src/provider"
	"github.com/perplext/LLMrecon/src/template/management"
)

// Engine interface for vulnerability detection
type Engine interface {
	Execute(ctx context.Context, template management.Template, provider provider.Provider) (*Result, error)
	Validate(template management.Template) error
	GetSupportedTemplateTypes() []string
}

// Result represents the result of a vulnerability detection
type Result struct {
	VulnerabilityDetected bool                   `json:"vulnerability_detected"`
	Title                 string                 `json:"title,omitempty"`
	Description           string                 `json:"description,omitempty"`
	Severity              string                 `json:"severity,omitempty"`
	Category              string                 `json:"category,omitempty"`
	Evidence              map[string]interface{} `json:"evidence,omitempty"`
	Remediation           string                 `json:"remediation,omitempty"`
	Confidence            float64                `json:"confidence,omitempty"`
	Timestamp             time.Time              `json:"timestamp"`
	Metadata              map[string]interface{} `json:"metadata,omitempty"`
}

// Detector interface for specific vulnerability detectors
type Detector interface {
	Detect(ctx context.Context, input *DetectionInput) (*Result, error)
	GetType() string
	GetSeverity() string
}

// DetectionInput represents input for vulnerability detection
type DetectionInput struct {
	Template  management.Template    `json:"template"`
	Provider  provider.Provider      `json:"provider"`
	Request   *provider.Request      `json:"request,omitempty"`
	Response  *provider.Response     `json:"response,omitempty"`
	Context   map[string]interface{} `json:"context,omitempty"`
}