// Package detection provides the vulnerability detection engine for LLM responses
package detection

import (
	"context"
)

// VulnerabilityType represents the type of vulnerability detected
type VulnerabilityType string

// Standard vulnerability types
const (
	// Prompt injection vulnerabilities
	PromptInjection VulnerabilityType = "prompt_injection"
	// Sensitive information disclosure
	SensitiveInfoDisclosure VulnerabilityType = "sensitive_info_disclosure"
	// Jailbreak attempts
	Jailbreak VulnerabilityType = "jailbreak"
	// Harmful content generation
	HarmfulContent VulnerabilityType = "harmful_content"
	// Insecure code generation
	InsecureCode VulnerabilityType = "insecure_code"
	// Data poisoning
	DataPoisoning VulnerabilityType = "data_poisoning"
	// Model denial of service
	ModelDoS VulnerabilityType = "model_dos"
	// Indirect prompt injection
	IndirectPromptInjection VulnerabilityType = "indirect_prompt_injection"
	// Unauthorized access
	UnauthorizedAccess VulnerabilityType = "unauthorized_access"
	// Overreliance
	Overreliance VulnerabilityType = "overreliance"
)

// SeverityLevel represents the severity of a detected vulnerability
type SeverityLevel string

// Standard severity levels
const (
	Critical SeverityLevel = "critical"
	High     SeverityLevel = "high"
	Medium   SeverityLevel = "medium"
	Low      SeverityLevel = "low"
	Info     SeverityLevel = "info"
)

// StandardMapping represents a mapping to a standard security framework
type StandardMapping struct {
	// Standard is the name of the standard (e.g., "OWASP Top 10 for LLMs", "ISO/IEC 42001")
	Standard string `json:"standard"`
	// ID is the identifier within the standard (e.g., "LLM01", "8.2.3")
	ID string `json:"id"`
	// Name is the name of the item within the standard
	Name string `json:"name"`
	// URL is a link to more information about the standard item
	URL string `json:"url,omitempty"`
}

// DetectionMethod represents the method used to detect a vulnerability
type DetectionMethod string

// Standard detection methods
const (
	StringMatch    DetectionMethod = "string_match"
	RegexMatch     DetectionMethod = "regex_match"
	SemanticMatch  DetectionMethod = "semantic_match"
	CustomFunction DetectionMethod = "custom_function"
	HybridMatch    DetectionMethod = "hybrid_match"
)

// DetectionResult represents the result of a vulnerability detection
type DetectionResult struct {
	// Detected indicates whether a vulnerability was detected
	Detected bool `json:"detected"`
	// VulnerabilityType is the type of vulnerability detected
	VulnerabilityType VulnerabilityType `json:"vulnerability_type"`
	// Severity is the severity level of the detected vulnerability
	Severity SeverityLevel `json:"severity"`
	// ConfidenceScore is the confidence score of the detection (0-100)
	ConfidenceScore int `json:"confidence_score"`
	// DetectionMethod is the method used to detect the vulnerability
	DetectionMethod DetectionMethod `json:"detection_method"`
	// StandardMappings maps the vulnerability to standard security frameworks
	StandardMappings []StandardMapping `json:"standard_mappings,omitempty"`
	// MatchedContent is the content that matched the detection criteria
	MatchedContent []string `json:"matched_content,omitempty"`
	// Context provides additional context about the detection
	Context map[string]interface{} `json:"context,omitempty"`
	// Timestamp is the time when the detection occurred
	Timestamp time.Time `json:"timestamp"`
	// RemediationSuggestion provides suggestions for remediation
	RemediationSuggestion string `json:"remediation_suggestion,omitempty"`
}

// DetectionCriteria represents the criteria for detecting a vulnerability
type DetectionCriteria struct {
	// Type is the type of detection method to use
	Type DetectionMethod `json:"type"`
	// Pattern is the pattern to match (for regex_match)
	Pattern string `json:"pattern,omitempty"`
	// Match is the string to match (for string_match)
	Match string `json:"match,omitempty"`
	// Criteria is the criteria for semantic matching (for semantic_match)
	Criteria string `json:"criteria,omitempty"`
	// FunctionName is the name of the custom function to use (for custom_function)
	FunctionName string `json:"function_name,omitempty"`
	// Condition is the condition to apply (e.g., "contains", "not_contains")
	Condition string `json:"condition,omitempty"`
	// Threshold is the threshold for semantic matching (0-100)
	Threshold int `json:"threshold,omitempty"`
	// CaseSensitive indicates whether the match should be case-sensitive
	CaseSensitive bool `json:"case_sensitive,omitempty"`
	// Context provides additional context for the detection
	Context map[string]interface{} `json:"context,omitempty"`
}

// VulnerabilityDetector is the interface for detecting vulnerabilities in LLM responses
type VulnerabilityDetector interface {
	// Detect detects vulnerabilities in an LLM response
	Detect(ctx context.Context, response string, criteria DetectionCriteria) (*DetectionResult, error)
	// Name returns the name of the detector
	Name() string
}

// DetectionEngine is the main interface for the vulnerability detection engine
type DetectionEngine interface {
	// RegisterDetector registers a vulnerability detector
	RegisterDetector(detector VulnerabilityDetector)
	// GetDetector gets a detector by name
	GetDetector(name string) (VulnerabilityDetector, bool)
	// ListDetectors lists all registered detectors
	ListDetectors() []string
	// Detect detects vulnerabilities in an LLM response using all registered detectors
	Detect(ctx context.Context, response string, criteria []DetectionCriteria) ([]*DetectionResult, error)
	// DetectWithDetector detects vulnerabilities in an LLM response using a specific detector
	DetectWithDetector(ctx context.Context, response string, criteria DetectionCriteria, detectorName string) (*DetectionResult, error)
}

// BatchDetectionRequest represents a request for batch detection
type BatchDetectionRequest struct {
	// Response is the LLM response to analyze
	Response string `json:"response"`
	// Criteria is the list of detection criteria to apply
	Criteria []DetectionCriteria `json:"criteria"`
	// DetectorName is the optional name of a specific detector to use
	DetectorName string `json:"detector_name,omitempty"`
}

// BatchDetectionResult represents the result of a batch detection
type BatchDetectionResult struct {
	// Response is the LLM response that was analyzed
	Response string `json:"response"`
	// Results is the list of detection results
	Results []*DetectionResult `json:"results"`
	// Error is any error that occurred during detection
	Error string `json:"error,omitempty"`
}

// RemediationProvider is the interface for providing remediation suggestions
type RemediationProvider interface {
	// GetRemediation gets a remediation suggestion for a detected vulnerability
	GetRemediation(ctx context.Context, result *DetectionResult) (string, error)
}

// StandardMappingProvider is the interface for mapping vulnerabilities to standards
type StandardMappingProvider interface {
	// GetStandardMappings gets standard mappings for a detected vulnerability
	GetStandardMappings(ctx context.Context, vulnType VulnerabilityType, severity SeverityLevel) ([]StandardMapping, error)
}

// DetectionHook is a function that runs before or after detection
type DetectionHook func(ctx context.Context, response string, criteria DetectionCriteria, result *DetectionResult) error
