// Package audit provides comprehensive security audit logging functionality
package audit

import (

	"github.com/perplext/LLMrecon/src/security/access/common"
)

// AuditEvent represents a security audit event
type AuditEvent struct {
	// Unique identifier for the audit event
	ID string `json:"id"`
	
	// Time when the event occurred
	Timestamp time.Time `json:"timestamp"`
	
	// User who performed the action
	UserID string `json:"user_id,omitempty"`
	
	// Username of the user who performed the action
	Username string `json:"username,omitempty"`
	
	// Type of action performed
	Action common.AuditAction `json:"action"`
	
	// Resource type that was acted upon
	Resource string `json:"resource"`
	
	// Specific resource identifier
	ResourceID string `json:"resource_id,omitempty"`
	
	// Human-readable description of the event
	Description string `json:"description"`
	
	// IP address where the action originated
	IPAddress string `json:"ip_address,omitempty"`
	
	// User agent of the client
	UserAgent string `json:"user_agent,omitempty"`
	
	// Severity level of the event
	Severity common.AuditSeverity `json:"severity"`
	
	// Status of the action (success, failure, etc.)
	Status string `json:"status"`
	
	// Session identifier
	SessionID string `json:"session_id,omitempty"`
	
	// Additional metadata about the event
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	
	// Changes made during the event (for update operations)
	Changes map[string]interface{} `json:"changes,omitempty"`
	
	// Request ID for correlating multiple events in a single request
	RequestID string `json:"request_id,omitempty"`
	
	// Duration of the operation in milliseconds
	DurationMs int64 `json:"duration_ms,omitempty"`
	
	// Whether the event was generated by the system
	SystemGenerated bool `json:"system_generated,omitempty"`
	
	// Tags for categorizing and filtering events
	Tags []string `json:"tags,omitempty"`
}

// AuditQueryFilter defines filters for querying audit logs
type AuditQueryFilter struct {
	// User ID to filter by
	UserID string `json:"user_id,omitempty"`
	
	// Username to filter by
	Username string `json:"username,omitempty"`
	
	// Action to filter by
	Action common.AuditAction `json:"action,omitempty"`
	
	// Resource type to filter by
	Resource string `json:"resource,omitempty"`
	
	// Resource ID to filter by
	ResourceID string `json:"resource_id,omitempty"`
	
	// IP address to filter by
	IPAddress string `json:"ip_address,omitempty"`
	
	// Minimum severity level to include
	MinSeverity common.AuditSeverity `json:"min_severity,omitempty"`
	
	// Maximum severity level to include
	MaxSeverity common.AuditSeverity `json:"max_severity,omitempty"`
	
	// Status to filter by
	Status string `json:"status,omitempty"`
	
	// Session ID to filter by
	SessionID string `json:"session_id,omitempty"`
	
	// Start time for the query range
	StartTime time.Time `json:"start_time,omitempty"`
	
	// End time for the query range
	EndTime time.Time `json:"end_time,omitempty"`
	
	// Maximum number of results to return
	Limit int `json:"limit,omitempty"`
	
	// Number of results to skip
	Offset int `json:"offset,omitempty"`
	
	// Field to sort by
	SortBy string `json:"sort_by,omitempty"`
	
	// Sort order (asc or desc)
	SortOrder string `json:"sort_order,omitempty"`
	
	// Tags to filter by (must match all)
	Tags []string `json:"tags,omitempty"`
	
	// Request ID to filter by
	RequestID string `json:"request_id,omitempty"`
	
	// Whether to include system-generated events
	IncludeSystemGenerated bool `json:"include_system_generated,omitempty"`
	
	// Full-text search query
	Query string `json:"query,omitempty"`
}

// NewAuditEvent creates a new audit event with default values
func NewAuditEvent(action common.AuditAction, resource string, description string) *AuditEvent {
	return &AuditEvent{
		Timestamp:   time.Now().UTC(),
		Action:      action,
		Resource:    resource,
		Description: description,
		Severity:    common.AuditSeverityInfo,
		Status:      "success",
		Metadata:    make(map[string]interface{}),
	}
}

// WithUserInfo adds user information to the audit event
func (e *AuditEvent) WithUserInfo(userID, username string) *AuditEvent {
	e.UserID = userID
	e.Username = username
	return e
}

// WithResourceID adds resource ID to the audit event
func (e *AuditEvent) WithResourceID(resourceID string) *AuditEvent {
	e.ResourceID = resourceID
	return e
}

// WithSeverity sets the severity of the audit event
func (e *AuditEvent) WithSeverity(severity common.AuditSeverity) *AuditEvent {
	e.Severity = severity
	return e
}

// WithStatus sets the status of the audit event
func (e *AuditEvent) WithStatus(status string) *AuditEvent {
	e.Status = status
	return e
}

// WithSessionID adds session ID to the audit event
func (e *AuditEvent) WithSessionID(sessionID string) *AuditEvent {
	e.SessionID = sessionID
	return e
}

// WithIPAddress adds IP address to the audit event
func (e *AuditEvent) WithIPAddress(ipAddress string) *AuditEvent {
	e.IPAddress = ipAddress
	return e
}

// WithUserAgent adds user agent to the audit event
func (e *AuditEvent) WithUserAgent(userAgent string) *AuditEvent {
	e.UserAgent = userAgent
	return e
}

// WithMetadata adds metadata to the audit event
func (e *AuditEvent) WithMetadata(key string, value interface{}) *AuditEvent {
	if e.Metadata == nil {
		e.Metadata = make(map[string]interface{})
	}
	e.Metadata[key] = value
	return e
}

// WithChanges adds changes information to the audit event
func (e *AuditEvent) WithChanges(changes map[string]interface{}) *AuditEvent {
	e.Changes = changes
	return e
}

// WithRequestID adds request ID to the audit event
func (e *AuditEvent) WithRequestID(requestID string) *AuditEvent {
	e.RequestID = requestID
	return e
}

// WithDuration adds operation duration to the audit event
func (e *AuditEvent) WithDuration(durationMs int64) *AuditEvent {
	e.DurationMs = durationMs
	return e
}

// AsSystemGenerated marks the event as system-generated
func (e *AuditEvent) AsSystemGenerated() *AuditEvent {
	e.SystemGenerated = true
	return e
}

// WithTags adds tags to the audit event
func (e *AuditEvent) WithTags(tags ...string) *AuditEvent {
	e.Tags = append(e.Tags, tags...)
	return e
}
