name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            platform: linux-amd64
          - goos: linux
            goarch: arm64
            platform: linux-arm64
          - goos: darwin
            goarch: amd64
            platform: darwin-amd64
          - goos: darwin
            goarch: arm64
            platform: darwin-arm64
          - goos: windows
            goarch: amd64
            platform: windows-amd64
            extension: .exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="llmrecon-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}${{ matrix.extension }}"
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o "${BINARY_NAME}" ./src/main.go
          
          # Create checksums
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          else
            shasum -a 256 "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          fi
          
          # Store binary name for upload
          echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: llmrecon-${{ matrix.platform }}
          path: |
            llmrecon-*
            *.sha256

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          merge-multiple: true

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"* %s (%h)" $PREV_TAG..HEAD >> release_notes.md
            echo "" >> release_notes.md
            echo "" >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "" >> release_notes.md
            echo "First release of LLMrecon - Enterprise LLM Security Testing Framework" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "## Features" >> release_notes.md
          echo "- OWASP LLM Top 10 compliance testing" >> release_notes.md
          echo "- Advanced prompt injection and jailbreak techniques" >> release_notes.md
          echo "- Multi-provider LLM testing support" >> release_notes.md
          echo "- Enterprise security features (RBAC, MFA, audit logging)" >> release_notes.md
          echo "- Template-based security testing framework" >> release_notes.md
          echo "- Comprehensive reporting and compliance documentation" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Download Pre-built Binaries" >> release_notes.md
          echo "Choose the appropriate binary for your platform:" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **Linux (x64)**: llmrecon-${{ steps.version.outputs.VERSION }}-linux-amd64" >> release_notes.md
          echo "- **Linux (ARM64)**: llmrecon-${{ steps.version.outputs.VERSION }}-linux-arm64" >> release_notes.md
          echo "- **macOS (Intel)**: llmrecon-${{ steps.version.outputs.VERSION }}-darwin-amd64" >> release_notes.md
          echo "- **macOS (Apple Silicon)**: llmrecon-${{ steps.version.outputs.VERSION }}-darwin-arm64" >> release_notes.md
          echo "- **Windows (x64)**: llmrecon-${{ steps.version.outputs.VERSION }}-windows-amd64.exe" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Verify Downloads" >> release_notes.md
          echo "Each binary includes a SHA256 checksum file for verification:" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "# Linux/macOS" >> release_notes.md
          echo "sha256sum -c llmrecon-${{ steps.version.outputs.VERSION }}-linux-amd64.sha256" >> release_notes.md
          echo "" >> release_notes.md
          echo "# macOS alternative" >> release_notes.md
          echo "shasum -a 256 -c llmrecon-${{ steps.version.outputs.VERSION }}-darwin-amd64.sha256" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Quick Start" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "# Make binary executable (Linux/macOS)" >> release_notes.md
          echo "chmod +x llmrecon-${{ steps.version.outputs.VERSION }}-linux-amd64" >> release_notes.md
          echo "" >> release_notes.md
          echo "# Run help" >> release_notes.md
          echo "./llmrecon-${{ steps.version.outputs.VERSION }}-linux-amd64 --help" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "⚠️ **Security Note**: This tool is designed for authorized security testing only. Ensure you have proper permissions before testing any systems." >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: LLMrecon ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
          files: |
            llmrecon-*
            *.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/llmrecon
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
            COMMIT=${{ github.sha }}
            DATE=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          merge-multiple: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'