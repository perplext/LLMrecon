name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Build
        run: go build -v ./src/main.go

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  validate-templates:
    name: Validate Templates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build template validator
        run: go build -o template-validator ./scripts/verify-template-format.go

      - name: Validate OWASP templates
        run: |
          find examples/templates/owasp-llm -name "*.yaml" -exec ./template-validator {} \;

      - name: Validate template schemas
        run: |
          # Install yq for YAML validation
          sudo snap install yq
          
          # Validate template structure
          find examples/templates -name "*.yaml" | while read template; do
            echo "Validating: $template"
            yq eval '.id' "$template" > /dev/null
            yq eval '.info.name' "$template" > /dev/null
            yq eval '.target' "$template" > /dev/null
            echo "✓ $template"
          done

  build-matrix:
    name: Build Matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build for ${{ matrix.goos }}-${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="llmrecon-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          go build -ldflags="-s -w" -o "${BINARY_NAME}" ./src/main.go
          ls -la "${BINARY_NAME}"

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: llmrecon:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check OWASP compliance
        run: |
          echo "Checking OWASP LLM Top 10 template coverage..."
          
          # Check for required OWASP categories
          CATEGORIES=("llm01" "llm02" "llm03" "llm04" "llm05" "llm06" "llm07" "llm08" "llm09" "llm10")
          
          for category in "${CATEGORIES[@]}"; do
            if find examples/templates/owasp-llm -name "*${category}*" | grep -q .; then
              echo "✓ Found templates for $category"
            else
              echo "⚠ Missing templates for $category"
            fi
          done

      - name: Validate security documentation
        run: |
          echo "Checking required security documentation..."
          
          FILES=("SECURITY.md" "LICENSE" "CONTRIBUTING.md")
          
          for file in "${FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✓ Found $file"
            else
              echo "❌ Missing $file"
              exit 1
            fi
          done

      - name: Check for sensitive information
        run: |
          echo "Scanning for potential secrets..."
          
          # Check for common secret patterns (but allow placeholders)
          if grep -r -E "(api_key|password|secret)" --include="*.yaml" --include="*.go" --include="*.md" . | grep -v -E "(EXAMPLE|PLACEHOLDER|YOUR_|REPLACE|TODO)" | grep -v -E "(api_key_storage|password.*management)"; then
            echo "⚠ Found potential secrets - please review"
          else
            echo "✓ No obvious secrets found"
          fi